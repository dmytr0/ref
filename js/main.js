// js/main.js - –ø—Ä–æ—Å—Ç–∏–π —ñ —Ä–æ–±–æ—á–∏–π –∫–æ–¥
class ModelsCatalog {
    constructor() {
        this.filteredModels = [...modelsData];
        this.selectedTags = []; // –î–æ–¥–∞—î–º–æ –º–∞—Å–∏–≤ –æ–±—Ä–∞–Ω–∏—Ö —Ç–µ–≥—ñ–≤
        // –î–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫—É –∑–∞—Ç—Ä–∏–º–∫—É —â–æ–± marked —Ç–æ—á–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤—Å—è
        setTimeout(() => {
            this.init();
        }, 100);
    }

    init() {
        console.log('Marked available:', typeof marked); // –î–ª—è –¥–µ–±–∞–≥—É
        this.renderCatalog();
        this.setupFilters();
        this.setupModal();
        this.updateResultsCount();
    }

    parseMarkdown(text) {
        console.log('Parsing markdown:', text.substring(0, 50));

        if (typeof marked === 'undefined') {
            console.error('Marked –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π!');
            return text;
        }

        try {
            console.log('Original text for parsing:', text.substring(0, 100));

            if (typeof marked.parse === 'function') {
                return marked.parse(text);
            } else if (typeof marked === 'function') {
                return marked(text);
            } else {
                console.error('Marked –Ω–µ —î —Ñ—É–Ω–∫—Ü—ñ—î—é!');
                return text;
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É:', error);
            return text;
        }
    }

    getShortDescription(markdown) {
        console.log('Getting short description for:', markdown.substring(0, 30)); // –î–ª—è –¥–µ–±–∞–≥—É

        // –°–ø–µ—Ä—à—É –ø–∞—Ä—Å–∏–º–æ markdown
        const htmlContent = this.parseMarkdown(markdown);
        console.log('Parsed HTML:', htmlContent.substring(0, 100)); // –î–ª—è –¥–µ–±–∞–≥—É

        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π div –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = htmlContent;

        // –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –ø–µ—Ä—à–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        const allText = tempDiv.textContent || tempDiv.innerText || '';

        // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞ –±–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ 150 —Å–∏–º–≤–æ–ª—ñ–≤
        const lines = allText.split('\n').filter(line => line.trim());
        const description = lines.find(line => !line.startsWith('#') && line.trim()) || lines[0] || '–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π';

        return description.length > 150 ? description.substring(0, 150) + '...' : description;
    }

    renderModelsGrid(models) {
        return models.map(model => {
            const shortDesc = this.getShortDescription(model.description);
            console.log('Short desc for', model.title, ':', shortDesc); // –î–ª—è –¥–µ–±–∞–≥—É

            return `
                <div class="model-card" data-model-id="${model.id}">
                    <div class="model-image">
                        ${model.preview ? 
                            `<img src="${model.preview}" alt="${model.title}" onerror="this.style.display='none'">` :
                            'üì¶'
                        }
                    </div>
                    <div class="model-info">
                        <h3 class="model-title">${model.title}</h3>
                        <div class="model-tags">
                            ${model.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                        </div>
                        <div class="model-description">${shortDesc}</div>
                    </div>
                </div>
            `;
        }).join('');
    }

    openModal(modelId) {
        const model = modelsData.find(m => m.id === modelId);
        if (!model) return;

        console.log('Opening modal for:', model.title); // –î–ª—è –¥–µ–±–∞–≥—É
        console.log('Description:', model.description); // –î–ª—è –¥–µ–±–∞–≥—É

        const modal = document.getElementById('model-modal');

        document.getElementById('modal-title').textContent = model.title;
        document.getElementById('modal-category').innerHTML =
            `<span class="model-category">${CATEGORIES[model.category]}</span>`;
        document.getElementById('modal-tags').innerHTML =
            model.tags.map(tag => `<span class="tag">${tag}</span>`).join('');

        // –ü–∞—Ä—Å–∏–º–æ markdown
        const parsedDescription = this.parseMarkdown(model.description);
        console.log('Parsed description:', parsedDescription); // –î–ª—è –¥–µ–±–∞–≥—É

        document.getElementById('modal-description').innerHTML = parsedDescription;

        this.setupModalGallery(model.images);
        document.getElementById('modal-download').href = model.downloadUrl;

        modal.style.display = 'block';
    }

    renderCatalog() {
        const catalogContent = document.getElementById('catalog-content');

        if (this.filteredModels.length === 0) {
            catalogContent.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üì¶</div>
                    <h3>–ú–æ–¥–µ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h3>
                    <p>–°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏</p>
                </div>
            `;
            return;
        }

        const groupedModels = this.groupModelsByCategory();

        catalogContent.innerHTML = Object.entries(CATEGORIES).map(([categoryId, categoryName]) => {
            const categoryModels = groupedModels[categoryId] || [];
            const categoryIcon = this.getCategoryIcon(categoryId);

            return `
                <div class="category-section ${categoryModels.length === 0 ? 'empty' : ''}">
                    <div class="category-header">
                        <span class="category-icon">${categoryIcon}</span>
                        <span>${categoryName}</span>
                        <span class="category-count">(${categoryModels.length})</span>
                    </div>
                    <div class="category-models">
                        ${categoryModels.length > 0 ? 
                            `<div class="models-grid">${this.renderModelsGrid(categoryModels)}</div>` :
                            `<div class="empty-category-message">–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –º–æ–¥–µ–ª–µ–π –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó</div>`
                        }
                    </div>
                </div>
            `;
        }).join('');

        this.setupModelCardEvents();
    }

    groupModelsByCategory() {
        return this.filteredModels.reduce((groups, model) => {
            const category = model.category;
            if (!groups[category]) {
                groups[category] = [];
            }
            groups[category].push(model);
            return groups;
        }, {});
    }

    getCategoryIcon(categoryId) {
        const icons = {
            'fpv-antenna-mounts': 'üì°',
            'fpv-gimbals': 'üé•',
            'fpv-misc': 'üöÅ',
            'misc': 'üîß'
        };
        return icons[categoryId] || 'üì¶';
    }

    setupModelCardEvents() {
        document.querySelectorAll('.model-card').forEach(card => {
            card.addEventListener('click', () => {
                const modelId = card.dataset.modelId;
                this.openModal(modelId);
            });
        });
    }

    setupFilters() {
        const categoryFilter = document.getElementById('category-filter');
        const tagFilter = document.getElementById('tag-filter');
        const searchFilter = document.getElementById('search-filter');
        const clearButton = document.getElementById('clear-filters');

        // –°—Ç–≤–æ—Ä—é—î–º–æ dropdown –¥–ª—è —Ç–µ–≥—ñ–≤
        this.setupTagFilter();

        const applyFilters = () => {
            const categoryValue = categoryFilter.value;
            const searchValue = searchFilter.value.toLowerCase();
            this.filteredModels = modelsData.filter(model => {
                const categoryMatch = !categoryValue || model.category === categoryValue;

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–¥–µ–ª—å –º—ñ—Å—Ç–∏—Ç—å –í–°–Ü –æ–±—Ä–∞–Ω—ñ —Ç–µ–≥–∏
                const tagMatch = this.selectedTags.length === 0 ||
                    this.selectedTags.every(selectedTag => model.tags.includes(selectedTag));

                const searchMatch = !searchValue ||
                    model.title.toLowerCase().includes(searchValue) ||
                    model.description.toLowerCase().includes(searchValue);

                return categoryMatch && tagMatch && searchMatch;
            });

            this.renderCatalog();
            this.updateResultsCount();
        };

        categoryFilter.addEventListener('change', applyFilters);
        searchFilter.addEventListener('input', applyFilters);

        // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è select —Ç–µ–≥—ñ–≤
        tagFilter.addEventListener('change', (e) => {
            const selectedTag = e.target.value;
            if (selectedTag && !this.selectedTags.includes(selectedTag)) {
                this.selectedTags.push(selectedTag);
                this.updateSelectedTagsDisplay();
                this.updateTagFilterOptions();
                applyFilters();
            }
            e.target.value = ''; // –°–∫–∏–¥–∞—î–º–æ select
        });

        clearButton.addEventListener('click', () => {
            categoryFilter.value = '';
            searchFilter.value = '';
            this.selectedTags = [];
            this.updateSelectedTagsDisplay();
            this.updateTagFilterOptions();
            this.filteredModels = [...modelsData];
            this.renderCatalog();
            this.updateResultsCount();
        });

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ applyFilters –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–µ—Ç–æ–¥–∞—Ö
        this.applyFilters = applyFilters;
    }

    setupTagFilter() {
        const allTags = [...new Set(modelsData.flatMap(model => model.tags))].sort();

        const tagSelect = document.getElementById('tag-filter');
        tagSelect.innerHTML = `
            <option value="">–û–±–µ—Ä—ñ—Ç—å —Ç–µ–≥...</option>
            ${allTags.map(tag => `<option value="${tag}">${tag}</option>`).join('')}
        `;

        this.updateSelectedTagsDisplay();
    }

    updateSelectedTagsDisplay() {
        const selectedTagsContainer = document.getElementById('selected-tags');

        if (this.selectedTags.length === 0) {
            selectedTagsContainer.innerHTML = '';
            return;
        }

        selectedTagsContainer.innerHTML = this.selectedTags.map(tag => `
            <div class="selected-tag">
                <span>${tag}</span>
                <span class="remove-tag" data-tag="${tag}">&times;</span>
            </div>
            `).join('');

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ–≥—ñ–≤
        selectedTagsContainer.querySelectorAll('.remove-tag').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const tagToRemove = e.target.dataset.tag;
                this.selectedTags = this.selectedTags.filter(tag => tag !== tagToRemove);
                this.updateSelectedTagsDisplay();
                this.updateTagFilterOptions();
                this.applyFilters();
            });
        });
    }

    updateTagFilterOptions() {
        const allTags = [...new Set(modelsData.flatMap(model => model.tags))].sort();
        const availableTags = allTags.filter(tag => !this.selectedTags.includes(tag));

        const tagSelect = document.getElementById('tag-filter');
        tagSelect.innerHTML = `
            <option value="">–û–±–µ—Ä—ñ—Ç—å —Ç–µ–≥...</option>
            ${availableTags.map(tag => `<option value="${tag}">${tag}</option>`).join('')}
        `;
    }

    updateResultsCount() {
        const countElement = document.getElementById('results-count');
        countElement.textContent = `–ó–Ω–∞–π–¥–µ–Ω–æ: ${this.filteredModels.length} –º–æ–¥–µ–ª–µ–π`;
    }

    setupModal() {
        const modal = document.getElementById('model-modal');
        const closeBtn = document.querySelector('.close');

        closeBtn.addEventListener('click', () => {
            modal.style.display = 'none';
        });

        window.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.style.display = 'none';
            }
        });
    }

    setupModalGallery(images) {
        const mainImage = document.getElementById('modal-main-image');
        const thumbnailStrip = document.querySelector('.thumbnail-strip');

        if (images && images.length > 0) {
            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ—ó –∫–∞—Ä—Ç–∏–Ω–∫–∏
            mainImage.onload = function() {
                // –ö–∞—Ä—Ç–∏–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∞—Å—å —É—Å–ø—ñ—à–Ω–æ
                console.log('Main image loaded successfully');
            };

            mainImage.onerror = function() {
                // –Ø–∫—â–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∞—Å—å
                console.log('Failed to load main image');
                this.style.display = 'flex';
                this.innerHTML = '<div style="font-size: 3rem; color: #999;">üì∑</div>';
            };
            mainImage.src = images[0];

            thumbnailStrip.innerHTML = images.map((img, index) => `
                <div class="thumbnail ${index === 0 ? 'active' : ''}" data-image="${img}">
                    <img src="${img}" alt="Thumbnail ${index + 1}"
                         onerror="this.parentElement.style.opacity='0.5'">
                </div>
            `).join('');

            thumbnailStrip.querySelectorAll('.thumbnail').forEach(thumb => {
                thumb.addEventListener('click', () => {
                    const newImage = thumb.dataset.image;
                    mainImage.src = newImage;

                    thumbnailStrip.querySelectorAll('.thumbnail').forEach(t =>
                        t.classList.remove('active')
                    );
                    thumb.classList.add('active');
                });
            });
        }
    }
}

document.addEventListener('DOMContentLoaded', () => {
    new ModelsCatalog();
});